@use 'sass:math';
@use 'sass:map';
@use 'sass:meta';
@use 'vars' as *;

@function to-em($px, $context: $size-font-base) {
	@return math.div($px, $context) + em;
}

@function to-rem($px, $base: $size-font-base) {
	@return math.div($px, $base) + rem;
}

@function locks(
	$size-min,
	$size-max,
	$viewport-min: map.get($breakpoint, 'start'),
	$viewport-max: map.get($breakpoint, 'end'),
) {
	$slope: math.div(($size-max - $size-min), ($viewport-max - $viewport-min));
	$preferred-size: to-rem($size-max - $viewport-max * $slope);

	@return clamp(#{to-rem($size-min)}, #{$preferred-size} + #{100vw * $slope}, #{to-rem($size-max)});
}

@function breakpoint-context($val) {
	@if meta.type-of($val) == number {
		@return $val;
	} @else if map.has-key($breakpoint, $val) {
		@return map.get($breakpoint, $val);
	} @else {
		@error 'Unknown argument <#{$val}>';
	}
}

@function t2c($target, $context, $unit: vw) {
	$result: calc((#{$target} / #{breakpoint-context($context)}) * 100);

	@if $unit == p {
		@return (calc(#{$result} * 1%));
	} @else if $unit == vw {
		@return (calc(#{$result} * 1vw));
	} @else {
		@error 'Unknown unit <#{$unit}>';
	}
}
